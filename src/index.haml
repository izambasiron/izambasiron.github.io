!!!
%html{lang: 'en'}
  %head
    %meta{charset: 'UTF-8'}
    %meta{name: "viewport", content: "width=device-width, initial-scale=1"}
    %link{href: 'bower_components/bootstrap/dist/css/bootstrap.min.css', rel: 'stylesheet'}
    %link{href: 'bower_components/font-awesome/css/font-awesome.min.css', rel: 'stylesheet'}
    %title Random Number Simulation
    :scss
      .calc {
        padding-top: .5em;
        h1 {
          margin-top: 0;
        }
      }
  %body
    .jumbotron
      .container
        %h1 Random Number Simulation
        %p
          A simple simulation of the proposed random number generation to examine how many tries it takes to complete the list of 3000 data set. I assume step value to be between 1 - 999 and multiplier between 1 - 99. You can change these values below or hit the `Start` button when ready.
        %form.form-inline
          .form-group
            %label{:for => "data"} Data
            %input#data.form-control{:placeholder => "Data", :type => "text", value: 3000}
          .form-group
            %label{:for => "min-step"} Step
            %input#min-step.form-control{:placeholder => "Minimum Step", :type => "text", value: 1}
            %input#max-step.form-control{:placeholder => "Maximum Step", :type => "text", value: 999}
          .form-group
            %label{:for => "min-multiplier"} Multiplier
            %input#min-multiplier.form-control{:placeholder => "Minimum Multiplier", :type => "text", value: 1}
            %input#max-multiplier.form-control{:placeholder => "Maximum Multiplier", :type => "text", value: 99}
          %button.btn.btn-primary{:type => "submit"}
            Start&nbsp;
            %span.glyphicon.glyphicon-send
    .container
      .row
        .col-lg-3
          .btn-danger.col-lg-12.calc
            %i.fa.fa-paper-plane.fa-4x.pull-left
            .small Maximum Tries
            %h1#max-tries 0
        .col-lg-3
          .btn-warning.col-lg-12.calc
            %i.fa.fa-hand-peace-o.fa-4x.pull-left
            .small Total Tries
            %h1#total-tries 0
        .col-lg-3
          .btn-primary.col-lg-12.calc
            %i.fa.fa-clock-o.fa-4x.pull-left
            .small Seconds Elapsed
            %h1#seconds-elapsed 0
        .col-lg-3
          .btn-success.col-lg-12.calc
            %i.fa.fa-thumbs-o-up.fa-4x.pull-left
            .small Percent Completed
            %h1#completed 0
      .row
        .col-lg-5
          %h2 Registered companies
          %table.table#registered-companies
            %thead
              %tr
                %th Registration Number
                %th Company Name
            %tbody
              %tr
                %td.text-center{colspan: 10} No records
        .col-lg-7
          %h2 Selected companies
          %table.table#selected-companies
            %thead
              %tr
                %th #
                %th Registration Number
                %th Company Name
                %th Initial Number
                %th Step
                %th Multiplier
                %th Count
            %tbody
              %tr
                %td.text-center{colspan: 10} No records
  %script{src: 'bower_components/jquery/dist/jquery.min.js'}
  %script{src: 'bower_components/bootstrap/dist/js/bootstrap.min.js'}
  %script{src: 'bower_components/ractive/ractive.min.js'}
  %script{src: 'bower_components/faker/build/build/faker.min.js'}
  %script#data-template{type: 'text/ractive'}
    {{#each companies:i}}
    {{#if .}}
    %tr
      %td {{reg_number}}
      %td {{name}}
    {{/if}}
    {{else}}
    %tr
      %td.text-center{colspan: 10} No records
    {{/each}}
  %script#data-template-selected{type: 'text/ractive'}
    {{#each companies:i}}
    {{#if .}}
    %tr
      %td {{@index + 1}}
      %td {{reg_number}}
      %td {{name}}
      %td {{init_number}}
      %td {{step}}
      %td {{multiplier}}
      %td {{count}}
    {{/if}}
    {{else}}
    %tr
      %td.text-center{colspan: 10} No records
    {{/each}}
  :javascript
      var startTime = 0;
      var triesNum = [];
      var s = [];
      var registeredCompaniesArray = [];
      var delay = 5; // milliseconds

      var registeredCompanies = new Ractive(
      {
        el: '#registered-companies tbody',
        template: '#data-template',
        data: {
          companies: {}
        }
      });

      var selectedCompanies = new Ractive(
      {
        el: '#selected-companies tbody',
        template: '#data-template-selected',
        data: {
          companies: {}
        }
      });

      function populateCompanies(dataCount)
      {
        var companies = {};
        for(var i = 1; i <= dataCount; i++)
        {
          companies[i.toString()] = {
            name: faker.company.companyName(),
            reg_number: i
          };
          registeredCompaniesArray.push(i);
        }
        return companies;
      }

      /**
       * @see http://stackoverflow.com/a/7228322/1391775
       */
      function randomIntFromInterval(min, max)
      {
        return Math.floor(Math.random() * (max - min + 1) + min);
      }

      function startGrabbing(tries, companies, dataCount, minHop, maxHop, minMultiplier, maxMultiplier)
      {
        var randomPos = randomIntFromInterval(1, parseInt(dataCount));
        var randomHop = randomIntFromInterval(parseInt(minHop), parseInt(maxHop));
        var randomMultiplier = randomIntFromInterval(parseInt(minMultiplier), parseInt(maxMultiplier));
        randomMultiplier++; // Include self
        var registration_number = randomPos;
        var selectedCompaniesData = selectedCompanies.get().companies;

        if (selectedCompaniesData[randomPos.toString()])
        {
          randomPos = findNearest(companies, randomPos, 1);
          if ( ! randomPos)
          {
            return setTimeout(function(){
              startGrabbing(tries + 1, companies, dataCount, minHop, maxHop, minMultiplier, maxMultiplier)
            }, delay);
          }
          else
          {
            registration_number = randomPos;
          }
        }

        var count = 1;
        while(registration_number <= dataCount && randomMultiplier > 0)
        {
          var registration_number_string = registration_number.toString();
          if (selectedCompaniesData[registration_number_string])
          {
            registration_number += randomHop;
            randomMultiplier--;
            count++;
            continue;
          }

          if (companies[registration_number_string])
          {
            selectedCompaniesData[registration_number_string] = companies[registration_number_string];
            selectedCompaniesData[registration_number_string]['init_number'] = randomPos;
            selectedCompaniesData[registration_number_string]['step'] = randomHop;
            selectedCompaniesData[registration_number_string]['multiplier'] = randomMultiplier;
            selectedCompaniesData[registration_number_string]['count'] = count;
            s.push(registration_number);
            selectedCompanies.set('companies', selectedCompaniesData);
            companies[registration_number_string] = undefined;
            var id = registeredCompaniesArray.indexOf(registration_number);
            registeredCompaniesArray.splice(id, 1);
            registeredCompanies.set('companies', companies);
          } else {
            console.log('This should never happen!');
            return;
          }

          registration_number += randomHop;
          randomMultiplier--;
          count++;
        }

        triesNum.push(tries);
        $('#max-tries').html(Math.max.apply(Math, triesNum));
        $('#total-tries').html(triesNum.reduce(add, 0));
        $('#completed').html(100 - Math.ceil(
          (parseInt($('#data').val()) - s.length) / parseInt($('#data').val()) * 100
        ));
        $('#seconds-elapsed').html(Math.floor((new Date().getTime() - startTime) / 1000));

        if (registeredCompaniesArray.length > 1)
        {
          setTimeout(function(){
            startGrabbing(1, companies, dataCount, minHop, maxHop, minMultiplier, maxMultiplier)
          }, delay);
        } else if(registeredCompaniesArray.length == 1) {
          var key = registeredCompaniesArray[0].toString();
          selectedCompaniesData[key] = companies[key];
          s.push(registration_number);
          selectedCompanies.set('companies', selectedCompaniesData);
          companies[key] = undefined;
          registeredCompaniesArray = [];
          registeredCompanies.set('companies', companies);
          $('#completed').html(100);
        }
      }

      function arrayOfInt(size)
      {
        var num = [];
        for(var i = 1; i <= parseInt(size); i++)
        {
          num.push(i);
        }
        return num;
      }

      function add(a, b)
      {
        return a + b;
      }

      function findNearest(companies, number, count)
      {
        if (number > registeredCompaniesArray[registeredCompaniesArray.length - 1])
        {
          return registeredCompaniesArray[0];
        }
        else if (companies[(number + count).toString()])
        {
          return number + count;
        }
        else if (number + count < registeredCompaniesArray[registeredCompaniesArray.length - 1])
        {
          return findNearest(companies, number, count + 1);
        }
      }

      $(function()
      {
        $('form').on('submit', function()
        {
          startTime = new Date().getTime();
          triesNum = [];
          s = [];
          registeredCompaniesArray = [];

          var companies = populateCompanies($('#data').val());
          selectedCompanies.set('companies', {});
          registeredCompanies.set('companies', companies);
          setTimeout(function()
          {
            startGrabbing(1, companies, $('#data').val(), $('#min-step').val(),
              $('#max-step').val(), $('#min-multiplier').val(), $('#max-multiplier').val());
          }, delay);
          return false;
        });
      })
